{
"name": "kalorienzaehler-mit-pdf", 
"type": "code/react", 
"content": "import React, { useState, useEffect, useRef } from \"react\";\nimport { PieChart, Pie, Cell, Legend, Tooltip, ResponsiveContainer } from \"recharts\";\nimport jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\n\nexport default function KalorienzaehlerApp() {\n  const [kommentar, setKommentar] = useState(\"\");\n  const [kcal, setKcal] = useState(\"\");\n  const [kategorie, setKategorie] = useState(\"Frühstück\");\n  const [entries, setEntries] = useState([]);\n  const chartRef = useRef(null);\n\n  const heute = new Date().toISOString().split(\"T\")[0];\n  const kategorien = [\"Frühstück\", \"Mittagessen\", \"Abendessen\", \"Snack\"];\n  const COLORS = [\"#3b82f6\", \"#f59e0b\", \"#10b981\", \"#ef4444\"];\n\n  // Alte Daten löschen (>7 Tage)\n  useEffect(() => {\n    const gespeicherte = JSON.parse(localStorage.getItem(\"kalorienEintraege\")) || [];\n    const siebenTageZurueck = new Date();\n    siebenTageZurueck.setDate(siebenTageZurueck.getDate() - 7);\n\n    const gefiltert = gespeicherte.filter((e) => new Date(e.datum) >= siebenTageZurueck);\n    setEntries(gefiltert);\n    localStorage.setItem(\"kalorienEintraege\", JSON.stringify(gefiltert));\n  }, []);\n\n  const speichern = () => {\n    if (!kommentar || !kcal) return;\n\n    const neuerEintrag = {\n      datum: heute,\n      kommentar,\n      kategorie,\n      kcal: parseFloat(kcal),\n    };\n\n    const neueListe = [...entries, neuerEintrag];\n    setEntries(neueListe);\n    localStorage.setItem(\"kalorienEintraege\", JSON.stringify(neueListe));\n\n    setKommentar(\"\");\n    setKcal(\"\");\n    setKategorie(\"Frühstück\");\n  };\n\n  const resetAlles = () => {\n    if (window.confirm(\"Möchtest du wirklich alle Einträge löschen?\")) {\n      setEntries([]);\n      localStorage.removeItem(\"kalorienEintraege\");\n    }\n  };\n\n  const exportCSV = () => {\n    if (entries.length === 0) return;\n    const header = \"Datum,Kategorie,Kommentar,KCAL\\n\";\n    const rows = entries\n      .map((e) => `${e.datum},${e.kategorie},${e.kommentar.replace(/,/g, ' ')},${e.kcal}`)\n      .join(\"\\n\");\n\n    const csvContent = header + rows;\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `kalorien_${heute}.csv`;\n    link.click();\n  };\n\n  const exportPDF = async () => {\n    const pdf = new jsPDF();\n    pdf.setFontSize(16);\n    pdf.text(\"Kalorienübersicht (letzte 7 Tage)\", 10, 15);\n\n    // Tabelle mit den Daten\n    let y = 25;\n    pdf.setFontSize(12);\n    pdf.text(\"Datum | Kategorie | Kommentar | KCAL\", 10, y);\n    y += 6;\n\n    entries.forEach((e) => {\n      pdf.text(`${e.datum} | ${e.kategorie} | ${e.kommentar} | ${e.kcal}`, 10, y);\n      y += 6;\n      if (y > 270) {\n        pdf.addPage();\n        y = 20;\n      }\n    });\n\n    // Diagramm anhängen\n    if (chartRef.current) {\n      const canvas = await html2canvas(chartRef.current);\n      const imgData = canvas.toDataURL(\"image/png\");\n      pdf.addPage();\n      pdf.text(\"Verteilung heute:\", 10, 15);\n      pdf.addImage(imgData, \"PNG\", 20, 25, 160, 120);\n    }\n\n    pdf.save(`Kalorien_${heute}.pdf`);\n  };\n\n  const gesamtProTag = entries.reduce((acc, e) => {\n    acc[e.datum] = (acc[e.datum] || 0) + e.kcal;\n    return acc;\n  }, {});\n\n  const datenHeute = kategorien.map((k) => ({\n    name: k,\n    value: entries\n      .filter((e) => e.datum === heute && e.kategorie === k)\n      .reduce((sum, e) => sum + e.kcal, 0),\n  }));\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col items-center p-6\">\n      <h1 className=\"text-2xl font-bold mb-6\">Kalorienzähler</h1>\n\n      <div className=\"bg-white shadow-md rounded-2xl p-6 w-full max-w-md\">\n        <div className=\"mb-4\">\n          <label className=\"block font-medium\">Datum</label>\n          <input\n            type=\"text\"\n            value={heute}\n            disabled\n            className=\"w-full mt-1 p-2 border rounded-lg bg-gray-100\"\n          />\n        </div>\n\n        <div className=\"mb-4\">\n          <label className=\"block font-medium\">Kommentar</label>\n          <input\n            type=\"text\"\n            value={kommentar}\n            onChange={(e) => setKommentar(e.target.value)}\n            className=\"w-full mt-1 p-2 border rounded-lg\"\n            placeholder=\"z. B. Apfel, Nudeln...\"\n          />\n        </div>\n\n        <div className=\"mb-4\">\n          <label className=\"block font-medium\">KCAL</label>\n          <input\n            type=\"number\"\n            value={kcal}\n            onChange={(e) => setKcal(e.target.value)}\n            className=\"w-full mt-1 p-2 border rounded-lg\"\n            placeholder=\"z. B. 250\"\n          />\n        </div>\n\n        <div className=\"mb-4\">\n          <label className=\"block font-medium\">Kategorie</label>\n          <select\n            value={kategorie}\n            onChange={(e) => setKategorie(e.target.value)}\n            className=\"w-full mt-1 p-2 border rounded-lg\"\n          >\n            {kategorien.map((k) => (\n              <option key={k} value={k}>\n                {k}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <button\n          onClick={speichern}\n          className=\"bg-blue-500 hover:bg-blue-600 text-white font-semibold w-full py-2 rounded-lg mb-2\"\n        >\n          Speichern\n        </button>\n\n        <div className=\"flex gap-2 mt-2\">\n          <button\n            onClick={exportCSV}\n            className=\"flex-1 bg-green-500 hover:bg-green-600 text-white font-semibold py-2 rounded-lg\"\n          >\n            Export (CSV)\n          </button>\n          <button\n            onClick={exportPDF}\n            className=\"flex-1 bg-purple-500 hover:bg-purple-600 text-white font-semibold py-2 rounded-lg\"\n          >\n            Export (PDF)\n          </button>\n        </div>\n\n        <button\n          onClick={resetAlles}\n          className=\"mt-2 w-full bg-red-500 hover:bg-red-600 text-white font-semibold py-2 rounded-lg\"\n        >\n          Alles löschen\n        </button>\n      </div>\n\n      <div className=\"mt-10 w-full max-w-2xl\">\n        <h2 className=\"text-xl font-semibold mb-4\">Übersicht</h2>\n        <table className=\"w-full border-collapse border text-left\">\n          <thead>\n            <tr className=\"bg-gray-200\">\n              <th className=\"border p-2\">Datum</th>\n              <th className=\"border p-2\">Gesamtkalorien</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(gesamtProTag).map(([datum, summe]) => (\n              <tr key={datum}>\n                <td className=\"border p-2\">{datum}</td>\n                <td className=\"border p-2\">{summe}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div ref={chartRef} className=\"mt-10 w-full max-w-xl\">\n        <h2 className=\"text-xl font-semibold mb-4\">Verteilung heute</h2>\n        <div className=\"bg-white rounded-2xl shadow p-4\">\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie data={datenHeute} dataKey=\"value\" nameKey=\"name\" outerRadius={100} label>\n                {datenHeute.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip />\n              <Legend />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n    </div>\n  );\n}"} 
